Listing 19-1. Capturing the Showplan trace and analyzing it
/*Execute this on the trace database, performance */
use performance
go

/*Step 1: Load the data from the trace file for the Showplan XML event */
select textdata,
spid,
cpu,
duration,
databasename,
objectname,
linenumber,
objecttype,
reads,
writes
into showplanmerge_down
from fn_trace_gettable('c:\files\mysales_merge_downloadpub.trc', default)
where eventclass=122
go

/*Step 2: Query the showplanmerge_down table */

select spid,
textdata,
databasename,
objectname,
objecttype
from showplanmerge_down
where textdata like '%item%' and objectname not like 'dynamic%'
order by spid
go
Listing 19-2. Determining the performance cost for executing merge triggers
/*Execute this on the performance database */
use performance
go

select spid,
cpu,
duration,
textdata,
databasename,
objectname,
objecttype,
reads,
writes
from mysales_tranperf_mergetrace
where textdata like '%trigger%'
and objecttype in (8272,21076)
order by cpu desc
go
Listing 19-3. Using SQLCMD to generate separate tables for trigger trace data
/* Use the SQLCMD utility to execute this script */
:setvar logintimeout 120
:setvar server "BIO-V7V30JTZLS\BIOREPL"
:setvar user "sa"
:setvar pwd "sujoy"
:connect $(server) -l $(logintimeout) -U $(user) -P $(pwd)

/* Use the database that holds the performance data */

Use $(db)
select $(col1), --textdata
$(col2), --spid
$(col3), -- cpu,
$(col4), ---duration
$(col5), --- databasename
$(col6), ---objectname
$(col7), ---linenumber
$(col8), ---objecttype
$(col9),---reads
$(col10) ---writes
 /* Name of the table in the performance database showplanmerge_down */
into $(tablename)
/*Name of the file''c:\files\mysales_merge_downloadpub.t'c', default) */
/* Just change the file extension if the trace file you are 
using is of file type XML(*.xml) or SQLPlan (*.SQLPlan) */
from fn_trace_gettable('$(path).trc',default)
/* SP:StmtCompleted =45 */

where eventclass=$(eventclass)
go
select $(col2),
$(col1),
$(col5),
$(col6),
$(col8)
from $(tablename)
---showplanmerge_down
where textdata like '$(stringvar1)'
---'%item%'
and objectname not like '$(stringvar2)'
---'dynamic%'
order by $(col2)
go
Listing 19-4. XML schema definition for the exploratory analysis using the DTA command-line utility
<?xml version="1.0" encoding="utf-16"?>
<DTAInput>
    <Server>
      <Name>BIO-V7V30JTZLS\BIOREPL</Name>
      <Database>
        <Name>mysales_downloadpushsub</Name>
        <Schema>
          <Name>myinventory</Name>
          <Table>
            <Name>Item</Name>
          </Table>
          <Table>
            <Name>PriceList</Name>
          </Table>
          <Table>
            <Name>Warehouse</Name>
          </Table>
        </Schema>
        <Schema>
          <Name>myorder</Name>
          <Table>

<Name>SalesPerson</Name>
          </Table>
        </Schema>
      </Database>
      <Database>
        <Name>mysales_remote1</Name>
        <Schema>
          <Name>myfinance</Name>
          <Table>
            <Name>AcccountsReceivable</Name>
          </Table>
          <Table>
<Name>AccountInvoice</Name>
          </Table>
          <Table>
            <Name>CashReceipt</Name>
          </Table>
        </Schema>
        <Schema>
          <Name>myinventory</Name>
          <Table>
            <Name>Item</Name>
          </Table>
          <Table>
            <Name>PriceList</Name>
          </Table>
          <Table>
            <Name>PurchaseOrderDetail</Name>
          </Table>
          <Table>
            <Name>PurchaseOrderHeader</Name>
          </Table>
          <Table>
<Name>StockItem</Name>
          </Table>
          <Table>
            <Name>Vendor</Name>
          </Table>
          <Table>
            <Name>Warehouse</Name>
          </Table>
        </Schema>
        <Schema>
          <Name>myorder</Name>
          <Table>
            <Name>BillTO</Name>
          </Table>
          <Table>
            <Name>Customer</Name>
          </Table>
          <Table>
            <Name>CustSales</Name>
          </Table>
          <Table>
            <Name>OrderHeader</Name>
          </Table>
          <Table>
               <Name>SalesPerson</Name>
          </Table>
          <Table>
            <Name>ShipTO</Name>
          </Table>
          <Table>
            <Name>Stock</Name>
          </Table>
          <Table>
                     <Name>ZONE</Name>
          </Table>
        </Schema>
      </Database>
      <Database>
        <Name>mysales_tranperf1</Name>
        <Schema>
          <Name>myfinance</Name>
          <Table>
            <Name>AccountInvoice</Name>
          </Table>
          <Table>
            <Name>AccountsReceivable</Name>
          </Table>
          <Table>
            <Name>CashReceipt</Name>
          </Table>
        </Schema>
        <Schema>
          <Name>myinventory</Name>
          <Table>
            <Name>Item</Name>
                    </Table>
          <Table>
            <Name>PriceList</Name>
          </Table>
          <Table>
            <Name>PurchaseOrderDetail</Name>
          </Table>
          <Table>
            <Name>PurchaseOrderHeader</Name>
          </Table>
          <Table>
            <Name>StockItem</Name>
          </Table>
          <Table>
            <Name>Vendor</Name>
          </Table>
          <Table>
            <Name>Warehouse</Name>
          </Table>
        </Schema>
        <Schema>
          <Name>myorder</Name>
          <Table>
            <Name>BillTO</Name>
          </Table>
          <Table>
            <Name>Customer</Name>
          </Table>
          <Table>
            <Name>CustSales</Name>
          </Table>
          <Table>
           <Name>OrderDetail</Name>
          </Table>
          <Table>
            <Name>OrderHeader</Name>
          </Table>
          <Table>
            <Name>SalesPerson</Name>
          </Table>
          <Table>
            <Name>ShipTO</Name>
          </Table>
          <Table>
            <Name>Stock</Name>
          </Table>
          <Table>
            <Name>ZONE</Name>
          </Table>
        </Schema>
      </Database>
    </Server>

<! --The name of the workload file; which can be xml or trc -->
 
  <Workload>
      <File>C:\files\mysales_merge_downloadpub.trc</File>
    </Workload>

<! --The tuning options -->
    <TuningOptions>
      <TuningLogTable />
      <TuningTimeInMin>52</TuningTimeInMin>
      <StorageBoundInMB>30</StorageBoundInMB>
      <MaxColumnsInIndex>1023</MaxColumnsInIndex>
      <DropOnlyMode />
      <KeepExisting>NONE</KeepExisting>
      <OnlineIndexOperation>MIXED</OnlineIndexOperation>
      <DatabaseToConnect>performance</DatabaseToConnect>
    </TuningOptions>

<! --The configuration options -->

<Configuration SpecificationMode="Absolute">
      <Server>
        <Name>BIO-V7V30JTZLS\BIOREPL</Name>
          <Database>
<Name>mysales_merge</Name>
            <Schema>
<Name>myinventory</Name>
                <Table>
                  <Name>Item</Name>
                  <Recommendation>
                    <Create>
<Index Clustered="true" Unique="false" 
Online="false" IndexSizeInMB="873.75">
                        <Name>PK_Item</Name>
                        </Index>
                    </Create>
                  </Recommendation>
                </Table>
            </Schema>
          </Database>
      </Server>
    </Configuration>
  </DTAInput>
</DTAXML>

